problema pegar(imagen:[[(Int, Int, Int)]],imagen2:[[(Int, Int, Int)]], pixel:(Int,Int,Int)) {
	
	modifica imagen;

	requiere hayRectanguloColorPixelEnImagen: hayRectangulo(pre(imagen),pixel);
	
	requiere EntradaEsRectangular: EsRectangular(pre(imagen));
	requiere Entrada2EsRectangular: EsRectangular(imagen2);
	requiere pixelesFormanRectangulo: EsRectangular(rectaPixel(pre(imagen), pixel));

	requiere EntradaTieneSuperficie: Alto(pre(imagen)) > 0 && Ancho(pre(imagen)) > 0;
	requiere Entrada2TieneSuperficie: Alto(imagen2) > 0 && Ancho(imagen2) > 0;

	requiere TodosLosPixelsSonValidos:  (∀ f<-pre(imagen)) (∀ px<-f) (0<=prm(px)<256 && 0<=sgd(px)<256 && 0<=trc(px)<256);
	requiere TodosLosPixelsSonValidos2:  (∀ f<-imagen2) (∀ px<-f) (0<=prm(px)<256 && 0<=sgd(px)<256 && 0<=trc(px)<256);

	asegura imagen2ContenidaEnRect: if Ancho(imagen2) <= Ancho(rectaPixel) && Alto(imagen2) <= Alto(rectaPixel) then imagen == pegoImagenes(pre(imagen), pegoImagenes(rectaPixel, imagen2, 0, 0),    primera coordenada horizontal del rect    ,    primera coordenada vertical del rect    ) else pre(imagen) == imagen

	asegura imagenTieneMismoTamaño: Alto(pre(imagen)) == Alto(imagen) && Ancho(pre(imagen)) == Ancho(imagen);

	
}

	aux rectaPixel(pxl:(Int, Int, Int), img:[[(Int, Int, Int)]]) : [[(Int, Int, Int)]] = "busca 2-vecinos del mismo color al pixel dado y estos son los que formarian el rectangulo o va por la imagen en busca de donde aparece el color y cuando lo encuentra se fija lo de 4DelMismoColor"			++++

	aux pegoImagenes(img,img2:[[(Int, Int, Int)]], x,y:Int) : [[(Int, Int, Int)]] = 

	aux 4DelMismoColor(kv:[(Int, Int, Int)], pxl:(Int,Int,Int) : Bool = (todo f <- kv) por lo menos 4 en f == pxl; ###---/// pueden llegar a aparecer separados, se soluciona haciendo un salto de 1 y que sean 2 seguidos mismo color, salto y luego 2 seguidos con el mismo color. en cualquier lado de los k vecinos..  

	aux hayRectangulo(img : [[(Int, Int, Int )]] , pxl : (Int,Int,Int)) : Bool = (i <-- [0:Alto(img)), (j <--[0:Ancho(img)),
	4DelMismoColor(vectorKVecinos(img,2,i,j), pxl:(Int,Int,Int))                                                     

	aux vectorKVecinos( img : [[ (Int, Int, Int)]] , k,i,j : Int ) : [(Int,Int,Int)] = 
		[ img[a][b] | a <-- [i-k+1..i+k-1], b <-[j-k +1..j+k-1], a>=0 && b>=0 && a < Alto(img) && b < Ancho(img) ]